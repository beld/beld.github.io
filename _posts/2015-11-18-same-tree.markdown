---
layout:     post
title:      "LeetCode: Same Tree"
subtitle:   " \"开刷LeetCode\""
date:       2015-11-18 00:30:00
author:     "Beld"
header-img: "img/post-bg-tree.png"
tags:
    - 算法
    - Algorithm
    - LeetCode
    - Tree
    - 树
---

今天开刷LeetCode，决定从树开始做，找了最简单的相同树判定。
太久没碰算法题，连怎么遍历都忘了。
自己首先的想法是把树遍历出来保存，然后再比较。后来才发现好笨，可以直接边遍历边比较。
不过因为第一次做，就按自己想法继续走。
对java也不熟，还搜了dynamic array怎么用，然后发现array是定长，要用ArrayList。
错了两次才accepted，第一次只把有数值的保存，这样完全丢失了树的结构信息，
第二次if－else逻辑不清，if里丢了右枝。
应该在线直接编辑框里直接码，鉴于不熟就在eclipse里实现了，代码如下：

```java
import java.util.ArrayList;

public class SameTree {

    static ArrayList pal = new ArrayList();
    static ArrayList qal = new ArrayList();

    public static boolean isSameTree(TreeNode p, TreeNode q) {
        inOrder(p,pal);
        inOrder(q,qal);
        if (pal.equals(qal)) {
            return true;
        } else {
            return false;
        }
    }

    public static void inOrder (TreeNode p, ArrayList al) {
          if (p != null) {
          al.add(p.val);
          if (p.left != null) {
            inOrder(p.left, al);
            inOrder(p.right, al);
          } else if (p.right != null) {
            al.add(null);
            inOrder(p.right,al);
          }
        }
        return;
    }

    public static void main(String[] args) {
      TreeNode p = new TreeNode(1);
      TreeNode q = new TreeNode(1);

        p.left = new TreeNode(1);
        p.left.right = new TreeNode(1);

        q.right = new TreeNode(1);
        q.right.right = new TreeNode(1);

        System.out.println(isSameTree(p,q));
        System.out.println(pal);
        System.out.println(qal);
  }
}
```

Anyway, good start.
